---
layout: post
title: Greedy
date: 2022-01-25
category: sample
---
# Greedy(탐욕법)
> 현재 상황에서 지금 당장 좋은 것만 고르는 방법

---
+ 특징
	- 현재의 선택이 나중에 미칠 영향에 대해서는 고려하지 않는다.  
	- 그리디 알고리즘 문제는 자주 정력 알고리즘과 짝을 이뤄 출제된다.

### 예제 1) 거스름돈
 　손님에게 거슬러 줘야 할 돈이 N원일 때 거슬러줘야 할 동전의 최소 개수를 구하라. 단, 거슬러 줘야 할 돈 N은 항상 10의 배수이다. 거스름돈으로 사용할 500원, 100원, 50원, 10원짜리 동전이 무한히 존재한다고 가정한다.

```python
n=1260
count=0

coin_types=[500,100,50,10]

for coin in coin_types:
	count += n//coin
	#a=n//coin
	#count+=a
	n%=coin

print(count) #동전의 개수는 6
```
화폐의 종류가 K개라고 할 때 위 소스코드의 시간 복잡도는 O(K)이다. 동전의 총 종류에만 영향을 받고, 금액의 크기와는 무관하다.  
이 문제를 그리디 알고리즘으로 해결할 수 있는 이유는 <u>가지고 있는 동전 중에서 큰 단위가 항상 작은 단위의 배수이므로 작은 단위의 동전들을 종합해 다른 해가 나올 수 없기 때문이다.</u>  
### 예제 2) 큰 수의 법칙
　주어진 수들을 M번 더하여 가장 큰 수를 만드는 법칙이다. 단, 배열의 특정한 인덱스(번호)에 해당하는 수가 연속해서 K번을 초과하여 더해질 수 없는 것이 이 법칙의 특징이다. 서로 다른 인덱스에 해당하는 수가 같은 경우에도 서로 다른 것으로 간주한다.

```python
n, m, k = map(int, input().split()) #n: 배열의 크기, m: 숫자가 더해지는 횟수, k: 초과횟수
data=list(map(int, input().split()))
sum=0

data.sort()
first=data[n-1]
second=data[n-2]

for i in range(m):
    if (i+1)%k==0:
        sum+=second #second_max
        continue
    sum+=first #max
print(sum)
```
가장 큰 수와 두 번째로 큰 수만 저장하고, <u>가장 큰 수를 k번 더하고 두번째로 큰 수를 한 번 더하는 연산을 반복하면 된다.</u> 아래는 또 다른 방법의 소스코드이다.

```python
n, m, k = map(int, input().split()) #n: 배열의 크기, m: 숫자가 더해지는 횟수, k: 초과횟수
data=list(map(int, input().split()))
sum=0

data.sort()
first=data[n-1]
second=data[n-2]

first_count=int(m/(k+1))*k+m%(k+1)
second_count=m-first_count #m//(k+1)

sum=first_count*first+second_count*second
print(sum)
```
가장 큰 수와 두 번째로 큰 수가 더해질 때는 <u>특정한 수열 형태로 일정하게 반복해서 더해지는 특징이 있다.</u> 가장 큰 수가 더해지는 횟수는 다음과 같고, 두 번째로 큰 수가 더해지는 횟수는 <u>M에서 가장 큰 수가 더해지는 횟수를 뺀 값이 된다.</u>
<center>int(M / (K + 1)) * K + M % (K+1)</center>

### 예제 3) 숫자 카드 게임
1. 숫자가 쓰인 카드들이 N x M 형태로 놓여 있다. 이떄 N은 행의 개수, M은 열의 개수를 의미한다.
2. 먼저 뽑고자 하는 카드가 포함되어 있는 행을 선택한다.
3. 그다음 선택된 행에 포함된 카드들 중 가장 숫자가 낮은 카드를 뽑아야 한다.
4. 따라서 처음에 카드를 골라낼 행을 선택할 때, 이후에 해당 행에서 가장 숫자가 낮은 카드를 뽑을 것을 고려하여 최종적으로 가장 높은 숫자의 카드를 뽑을 수 있도록 전략을 세워야 한다.
```python
n, m = map(int, input().split()) #n: 행, m: 열
result=0
for i in range(n):
    data=list(map(int, input().split()))
    min_value=min(data)
    result=max(result,min_value)
    '''data.sort()
    min=data[0]
    if result<=min:
        result=min'''
print(result)
```
<u>각 행마다 가장 작은 수를 찾은 뒤에 그 수 중에서 가장 큰 수를 찾는다.</u>

### 예제 4) 1이 될 때까지
　N과 K가 주어질 때 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 최소 횟수를 구하는 프로그램을 작성하시오.
1. N에서 1을 뺀다.
2. N을 K로 나눈다.

```python
n, k = map(int, input().split())
count=0

def one(n):
    return n-1
def two(n):
    return n/k

while True:
    if n==1:
        break
    if n%k == 0:
        n=two(n)
    else:
        n=one(n)
    count+=1
print(count)
```
<u>N이 K의 배수가 될 때까지 1씩 뺀 후에, N을 K로 나누는 과정을 N이 1이 될 때까지 반복한다.</u><br><br>
N이 100억 이상의 큰 수가 되는 경우를 가정했을 때에도 빠르게 동작하려면, N이 K의 배수가 되도록 효율적으로 한 번에 빼는 방식으로 소스코드를 작성할 수 있다.
```python
n, k = map(int, input().split())
count=0

while True:
    # (N==K로 나누어떨어지는 수)가 될 때까지 1씩 빼기
    target=(n//k)*k
    count+=n-target
    n=target
    # N이 K보다 작을 때(더 이상 나눌 수 없을 때) 반복문 탈출
    if n<k:
        break
    count+=1
    n//=k
# 마지막으로 남은 수에 대하여 1씩 빼기
count+=n-1
print(count)
```







