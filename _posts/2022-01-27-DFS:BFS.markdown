---
layout: post
title:  "DFS/BFS"
date:   2022-01-27
categories: jekyll update
---
# DFS/BFS
> 그래프를 탐색하기 위한 대표적인 두 가지 알고리즘

---
+ 탐색이란
  - 많은 양의 데이터 중에서 원하는 데이터를 찾는 과정을 의미한다.

+ 자료구조란
  - 데이터를 표현하고 관리하고 처리하기 위한 구조를 의미한다.
+ 스택
  - 선입후출 구조 또는 후입선출 구조라고 한다.
  - 파이썬에서 스택을 이용할 때에는 기본 리스트에서 append()와 pop() 메서드를 이용하면 스택 자료구조와 동일하게 동작한다.
+ 큐
  - 선입선출 구조라고 한다.
  - 파이썬으로 큐를 구현할 때는 collections 모듈에서 제공하는 deque 자료구조를 활용하자.
+ 재귀 함수
  - 자기 자신을 다시 호출하는 함수를 의미한다.
+ 그래프 표현 방식
  - 인접 행렬: 2차원 배열로 그래프의 연결 관계를 표현하는 방식
  - 인접 리스트: 리스트로 그래프의 연결 관계를 표현하는 방식

### 예제 1) 음료수 얼려 먹기
 　N x M 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시된다. 구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주한다. 이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하시오.

```python
# DFS 활용
n,m=map(int,input().split())
graph=[]
for i in range(n):
    graph.append(list(map(int,input())))
print(graph)

def dfs(x,y):
    if x<=-1 or x>=n or y<=-1 or y>=m:
        return False
    if graph[x][y]==0:
        graph[x][y]=1
        dfs(x-1,y)
        dfs(x+1,y)
        dfs(x,y-1)
        dfs(x,y+1)
        return True
    return False
count=0
for i in range(n):
    for j in range(m):
        if dfs(i,j)==True:
            count+=1
print(count)
```
1. 특정한 지점의 주변 상, 하, 좌, 우를 살펴본 뒤에 주변 지점 중에서 값이 '0'이면서 아직 방문하지 않은 지점이 있다면 해당 지점을 방문한다.
2. 방문한 지점에서 다시 상, 하, 좌, 우를 살펴보면서 방문을 다시 진행하면, 연결된 모든 지점을 방문할 수 있다.
3. 1~2번의 과정을 모든 노드에 반복하며 방문하지 않은 지점의 수를 센다.

### 예제 2) 미로 탈출
 　동빈이는 N x M 크기의 직사각형 형태의 미로에 갇혀 있다. 동빈이의 위치는 (1, 1)이고 미로의 출구는 (N, M)의 위치에 존재하며 한번에 한 칸씩 이동할 수 있다. 이때 괴물이 있는 부분은 0으로, 괴물이 없는 부분은 1로 표시되어 있다. 이때 동빈이가 탈출하기 위해 움직여야 하는 최소 칸의 개수를 구하시오. 칸을 셀 때는 시작 칸과 마지막 칸을 모두 포함해서 계산한다.
 ```python
 # BFS 활용
 from collections import deque

n,m=map(int,input().split())
graph=[]
dx=[-1,1,0,0]
dy=[0,0,-1,1]
for i in range(n):
    graph.append(list(map(int,input())))

def bfs(x,y):
    queue=deque()
    queue.append((x,y))
    while queue:
        x,y=queue.popleft()
        for i in range(4):
            nx=x+dx[i]
            ny=y+dy[i]
            if nx<=-1 or nx>=n or ny<=-1 or ny>=m:
                continue
            if graph[nx][ny]==0:
                continue
            # 해당 노드를 처음 방문하는 경우에만 최단 거리 기록
            if graph[nx][ny]==1:
                graph[nx][ny]=graph[x][y]+1
                queue.append((nx,ny))
    return graph[n-1][m-1]

print(bfs(0,0))
 ```
 이 문제는 BFS를 이용했을 때 매우 효과적으로 해결할 수 있다. BFS는 시작 지점에서 가까운 노드부터 차례대로 그래프의 모든 노드를 탐색하기 때문이다. 특정한 노드를 방문하면 그 이전 노드의 거리에 1을 더한 값을 리스트에 넣는다.
