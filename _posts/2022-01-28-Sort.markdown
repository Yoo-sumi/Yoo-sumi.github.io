---
layout: post
title:  "Sort"
date:   2022-01-28
categories: jekyll update
---
# Sort
> 연속된 데이터를 기준에 따라서 정렬하기 위한 알고리즘

---
+ 선택 정렬
  - 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸고, 그다음 작은 데이터를 선택해 앞에서 두 번째 데이터와 바꾸는 과정을 반복한다.
  - 기본 정렬 라이브러리를 포함해 다른 알고리즘과 비교했을 때 매우 비효율적이다.
  - 시간 복잡도는 O(N^2)이다.(최악의 경우에도)

+ 삽입 정렬
  - 특정한 데이터를 적절한 위치에 삽입한다.
  - 시간 복잡도는 O(N^2)이다.(최악의 경우에도)
  - 현재 리스트의 데이터가 거의 정렬되어 있는 상태라면 매우 빠르게 동작한다. 최선의 경우 O(N)의 시간 복잡도를 가진다.
+ 퀵 정렬
  - 기준 데이터를 설정하고 그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾼다.
  - 평균 시간 복잡도는 O(NlogN)이다.
  - 최악의 경우 시간 복잡도는 O(N^2)이다. 삽입 정렬과 반대된다.
+ 계수 정렬
  - 특정한 조건이 부합할 때만 사용할 수 있지만 매우 빠른 정렬 알고리즘이다.
  - 시간 복잡도는 O(N)이다.
  - 데이터의 범위만 한정되어 있다면 효과적으로 사용할 수 있으며 항상 동작한다.
  - 사실상 현존하는 정렬 알고리즘 중에서 기수 정렬과 더불어 가장 빠르다고 볼 수 있다.
+ 정렬 라이브러리이 사용되는 문제 유형
    1. 정렬 라이브러리로 풀 수 있는 문제: 단순히 정렬 기법을 알고 있는지 물어보는 문제로 기본 정렬 라이브러리의 사용 방법을 숙지하고 있으면 어렵지 않게 풀 수 있다.
    2. 정렬 알고리즘의 원리에 대해서 물어보는 문제: 선택 정렬, 삽입 정렬, 퀵 정렬 등의 원리를 알고 있어야 문제를 풀 수 있다.
    3. 더 빠른 정렬이 필요한 문제: 퀵 정렬 기반의 정렬 기법으로는 풀 수 없으며 계수 정렬 등의 다른 정렬 알고리즘을 이용하거나 문제에서 기존에 알려진 알고리즘의 구조적인 개선을 거쳐야 풀 수 있다.

### 예제 1) 위에서 아래로
　하나의 수열에는 다양한 수가 존재한다. 이 수를 큰 수부터 작은 수의 순서로 정렬해야 한다.

```python
n=int(input())
array=[]

for i in range(n):
    array.append(int(input()))

array=sorted(array,reverse=True)
'''array.sort()
array.reverse()'''

for i in array:
    print(i,end=" ")
```

### 예제 2) 성적이 낮은 순서로 학생 출력하기
 　N명의 학생 정보가 있다. 학생 정보는 학생의 이름과 학생의 성적으로 구분된다. 각 학생의 이름과 성적 정보가 주어졌을 때 성적이 낮은 순서대로 학생의 이름을 출력하는 프로그램을 작성하시오.

```python
n=int(input())
array=[]
for i in range(n):
    input_data=input().split()
    array.append((input_data[0],int(input_data[1])))
def setting(data):
    return data[1]

array=sorted(array, key=lambda data: data[1])
#array=sorted(array,key=setting)

for i in array:
    print(i[0],end=" ")
```
### 예제 3) 두 배열의 원소 교체
 　배열 A와 B가 있다. 두 배열은 N개의 원소로 구성되어 있으며, 배열의 원소는 모두 자연수이다. 최대 K번의 바꿔치기 연산을 수행할 수 있는데, 배열 A에 있는 원소 하나와 B에 있는 원소 하나를 골라서 두 원소를 서로 바꾸는 것이다. 배열 A의 모든 원소의 합이 최대가 되도록 해라.

```python
n,k=map(int,input().split())

A=list(map(int,input().split()))
B=list(map(int,input().split()))

A.sort()
B.sort(reverse=True)

for i in range(k):
    if A[i]<B[i]:
        A[i],B[i]=B[i],A[i]
    else:
        break
sum=0
for i in A:
    sum+=i
print(sum)
```
